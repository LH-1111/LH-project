指针的基本概念：
作用：可以通过指针间接访问内存

1.内存编号是从0开始记录的，一版用16进制数字表示
2.利用指针变量保存地址

定义指针：
数据类型 * 指针变量名； 

使用指针
可以通过解引用的方式来找到指针指向的内存

指针占用的内存空间
32操作空间，4个字节
64操作空间，8个字节


空指针 
指针变量指向内存中编号0的空间
1.用来给指针变量进行初始化
int * p = NULL ;
2.空指针指向的内存不能进行访问

野指针
指针变量指向非法的内存空间。

const修饰指针
1.const修饰指针，常量指针
const int * p = &a;
指针的指向可以改，指针指向的值不可以改。

2.const修饰常量，指针常量
int * const p = &a;
指针的指向不可以改，指针指向的值可以改。

3.const既修饰指针有修饰常量，修饰常量
const int * const p = &a;
指针的指向不可以改，指针指向的值不可以改。
看const后面接的是指针还是常量，如果是指针就是常量指针；如果是常量就是指针常量。




指针和数组
指针和函数
值传递
不能修改实参
地址传递
可以修改实参


结构体
结构体属于用户自定义的数据类型，允许存储不同的数据类型。
struct 结构体名称 {结构体成员变量}
1.struct 结构体名 成员变量
2.struct 结构体名 成员变量 = {成员1value ,成员2value ,....}
3.定义结构体时顺便创建变量

结构体指针
->