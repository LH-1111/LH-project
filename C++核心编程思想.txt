内存的分区模型
1.代码区：存放函数体的二级制代码，由操作系统进行管理的
2.全局区：存放全局变量和静态变量已经常量
3.栈区：由编译器自动分配释放，存放函数的参数值，局部变量等。
4.堆去：由程序员分配释放，若程序员不释放，程序结束时由操作系统释放。

内存四区意义：
不同区域存放的数据，赋予不同的生命周期，给我们更大的灵活编程


程序运行前
在程序编译后，生成可执行的程序。未执行该程序前分为两个区域。
代码区:
    存放CPU执行的机器指令
    代码区是共享的，共享的目的是对于频繁被执行的程序，只需要在内存中有一份代码即可。
    代码区是只读的，只读的原因是防止其他程序意外的修改它的指令。

全局区：
    全局变量和静态变量存放在此。
    全局区还包含了常量区，字符串常量和其他常量也存放在此。
    该区域的数据在程序结束后由操作系统释放

全局变量 不在函数体里面。
静态变量 在普通变量前面加static，属于静态变量
static int a = 10;  

常量

字符串常量
string s = "hello world"

const修饰的变量
const修饰的全局变量，const修饰的局部变量


程序运行后：
栈区：
由编译器自动分配释放，存放函数的参数值，局部变量等。
注意事项：不要返回局部变量的地址，栈区开辟的数据由编译器自动释放。

堆区：
由程序员分配释放，若程序员不释放，程序结束时由操作系统回收。
在c++中用new开辟数据。
指针的本质也是局部变量，放在栈上，但是指针指向的数据在堆上。


new操作符
new 数据类型();
new 数据类型[len];
delete操作符

引用的基本使用。
给变量起别名
数据类型 &别名 = 原名；
int a = 10 ；
int &b = a ；

引用必须初始化
引用在初始化之后不能改变。

引用做函数参数
作用：函数传参的时候，可以利用引用的技术让形参修饰实参
优点：可以简化指针修改实参。

通过引用参数产生的效果同按地址传递是一样的。引用的语法更清楚简单。


引用做函数的返回值
1.不要返回局部变量的引用
2.函数的调用可以作为左值存在。

引用的本质就是指针常量
int &ref = 10 //错误 因为引用要指向合法的内存空间
const int &ref = 10 //正确  int temp = 10 ； const int &ref = temp 


